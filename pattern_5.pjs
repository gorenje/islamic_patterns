// -*- js2 -*-
// 	Processing.js Example

var MasterCircle = function( cpt, radius, num_of_points ) {
  this.num_of_points = num_of_points;
  this.circle = new ProCircle( cpt, radius );
  this.factor_larger = 1;
  this.draw_the_circles = 1;
};

MasterCircle.prototype = {
  sub_circles: function() {
    var pts = this.circle.points(this.num_of_points);
    var sub_circles = new Array();
    var n_circle = null;
    var p_circle = null;
    
    for ( idx in pts ) {
      var center_pt = this.circle.cpt.point_on_segment(pts[idx], this.factor_larger);
      var circle = new ProCircle(center_pt, this.circle.radius);
      circle.prev_circle = p_circle;
      sub_circles[idx] = circle;
      p_circle = circle;
    }

    sub_circles[0].prev_circle = sub_circles[this.num_of_points - 1];
    n_circle = sub_circles[0];
    for ( var idx = this.num_of_points - 1; idx > -1; idx-- ) {
      sub_circles[idx].next_circle = n_circle;
      n_circle = sub_circles[idx];
    }
    return sub_circles;
  },
  
  draw_phase_6: function(context) {
    context.exit();
  },

  draw_phase_4: function(context) {
    var subs = this.sub_circles();
    for ( var idx = 0; idx < this.num_of_points; idx++ ) {
      var cc = subs[idx];

      stroke(255, 255, 255);
      noFill();

      var pt1 = this.circle.cpt.point_on_segment(cc.cpt, 1/4);
      var pt2 = this.circle.cpt.point_on_segment(cc.next_circle.cpt, 1/4);
      var pt3 = cc.cpt.point_on_segment(cc.next_circle.cpt, 3/4);
      var pt4 = cc.cpt.point_on_segment(cc.next_circle.cpt, 1/4);

      (l1 = new ProLine(pt1, pt3));
      (l2 = new ProLine(pt4, pt2));
      var topTr = l1.intersection(l2);

      pt1 = this.circle.cpt.point_on_segment(cc.cpt, 3/4);
      pt2 = this.circle.cpt.point_on_segment(cc.next_circle.cpt, 3/4);
      (l3 = new ProLine(pt1, pt2));

      var botL = l1.intersection(l3);
      var botR = l2.intersection(l3);

      var lines = [
        new ProLine( botR, cc.cpt.point_on_segment(botR,2.0)),
        new ProLine( botL, cc.next_circle.cpt.point_on_segment(botL,2.0)),
        new ProLine( topTr, this.circle.cpt.point_on_segment(topTr,2.0))
      ];

      var center_of_triangle = lines[2].intersection(lines[1]);

      var pt2 = topTr.point_on_segment(center_of_triangle, 2);
      var pt4 = botR.point_on_segment(pt2, 2);

      (l1 = new ProLine(pt4, this.circle.cpt)); //.draw(context);
      var pt10 = this.circle.cpt.point_on_segment(cc.cpt, 1/4);
      var pt11 = this.circle.cpt.point_on_segment(cc.next_circle.cpt, 2/4);
      var pt13 = this.circle.cpt.point_on_segment(cc.cpt, 2/4);
      (l2 = new ProLine(pt10, pt11)); //.draw(context);

      var pt12 = l1.intersection(l2);
      (new ProCircle(pt12,5)).draw(context);
      (new ProCircle(pt13,5)).draw(context);
      var pt14 = pt12.point_on_segment(pt13,2);

      (new ProCircle(pt14,5)).draw(context);
      alert( "sd");

      bezier(this.circle.cpt.x, this.circle.cpt.y, 
             pt12.x,pt12.y, pt12.x,pt12.y, pt13.x, pt13.y);

      bezier(cc.cpt.x, cc.cpt.y, 
             pt14.x,pt14.y, pt14.x,pt14.y, pt13.x, pt13.y);

      var pt15 = cc.cpt.point_on_segment(cc.next_circle.cpt, 2/4);
      (new ProCircle(pt15,5)).draw(context);

      bezier(cc.cpt.x, cc.cpt.y, 
             pt14.x,pt14.y, pt14.x,pt14.y, pt15.x, pt15.y);
      bezier(cc.next_circle.cpt.x, cc.next_circle.cpt.y,
             pt14.x,pt14.y, pt14.x,pt14.y, pt15.x, pt15.y);
    }
  },

  draw_phase_5: function(context) {
    var subs = this.sub_circles();
    for ( var idx = 0; idx < this.num_of_points; idx++ ) {
      var cc = subs[idx];
      context.noFill();
      context.stroke( 23,78, 102);
      
      var pt1 = this.circle.cpt.point_on_segment(cc.cpt, 1/4);
      var pt2 = this.circle.cpt.point_on_segment(cc.next_circle.cpt, 1/4);
      var pt3 = cc.cpt.point_on_segment(cc.next_circle.cpt, 3/4);
      var pt4 = cc.cpt.point_on_segment(cc.next_circle.cpt, 1/4);

      (l1 = new ProLine(pt1, pt3));
      (l2 = new ProLine(pt4, pt2));
      var topTr = l1.intersection(l2);

      pt1 = this.circle.cpt.point_on_segment(cc.cpt, 3/4);
      pt2 = this.circle.cpt.point_on_segment(cc.next_circle.cpt, 3/4);
      (l3 = new ProLine(pt1, pt2));

      var botL = l1.intersection(l3);
      var botR = l2.intersection(l3);
      
      var lines = [
        new ProLine( botR, cc.cpt.point_on_segment(botR,2.0)),
        new ProLine( botL, cc.next_circle.cpt.point_on_segment(botL,2.0)),
        new ProLine( topTr, this.circle.cpt.point_on_segment(topTr,2.0))
      ];

      var center_of_triangle = lines[2].intersection(lines[1]);

      var pt2 = topTr.point_on_segment(center_of_triangle, 2);
      var pt3 = botL.point_on_segment(center_of_triangle, 2);
      var pt1 = botR.point_on_segment(center_of_triangle, 2);

      var pt4 = botR.point_on_segment(pt2, 2);
      var pt5 = botL.point_on_segment(pt2, 2);
      var pt6 = botR.point_on_segment(pt3, 2);
      var pt7 = topTr.point_on_segment(pt1, 2);
      var pt8 = pt2.point_on_segment(botR, 2);
      var pt9 = pt3.point_on_segment(topTr, 2);

      // TODO do this with a ProDrawStack
      stroke(255, 155, 55);
      fill(255, 155, 55);
      context.beginShape();
      botL.draw(context);
      pt4.draw(context);
      pt2.draw(context);
      pt5.draw(context);
      botR.draw(context);
      pt8.draw(context);
      pt3.draw(context);
      pt6.draw(context);
      topTr.draw(context);
      pt9.draw(context);
      pt1.draw(context);
      pt7.draw(context);
      context.endShape(CLOSE);
    }
  },

  draw_phase_3: function(context) {
    var subs = this.sub_circles();
    for ( var idx = 0; idx < this.num_of_points; idx++ ) {
      var cc = subs[idx];
      context.noFill();
      context.stroke( 23,78, 102);
      
      var pt1 = this.circle.cpt.point_on_segment(cc.cpt, 1/4);
      var pt2 = this.circle.cpt.point_on_segment(cc.next_circle.cpt, 1/4);
      var pt3 = cc.cpt.point_on_segment(cc.next_circle.cpt, 3/4);
      var pt4 = cc.cpt.point_on_segment(cc.next_circle.cpt, 1/4);
      (new ProLine(pt1, pt3)).draw(context);
      (new ProLine(pt4, pt2)).draw(context);
    }
  },

  draw_phase_2: function(context) {
    var subs = this.sub_circles();
    for ( var idx = 0; idx < this.num_of_points; idx++ ) {
      var cc = subs[idx];

      context.noFill();
      context.stroke(23,78,102);
      (new ProTriangle(this.circle.cpt, cc.cpt, cc.next_circle.cpt)).draw(context);
    }
  },

  draw_phase_1: function(context) {
    context.noFill();
    context.stroke(0,255,100);
    var subs = this.sub_circles();
    for ( c in subs ) { subs[c].draw(context); }
    this.circle.draw(context);
  },

  new_masters: function() {
    var subs = this.sub_circles();
    var ret_val = [];
    for ( c in subs ) { 
      ret_val.push(new MasterCircle( subs[c].cpt.clone(), subs[c].radius, 
                                     this.num_of_points));
    }
    return ret_val;
  },
};

var master_circle = new MasterCircle(new ProPoint(300,300), 250, 6);
var phase = 0;
var masters = master_circle.new_masters();

void setup() {
  size(600, 600);
  frameRate(1);
  background(#001100);
};

void draw() {
  phase += 1;
  eval( "master_circle.draw_phase_" + phase + "(this)");
};

