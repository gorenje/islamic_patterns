// -*- javascript -*-
// 	Processing.js Example

var MasterCircle = function( cpt, radius, num_of_points ) {
  this.num_of_points = num_of_points;
  this.circle = new ProCircle( cpt, radius );
  this.factor_larger = 1.5; // change this to make rects + triangles bigger/smaller
  this.draw_the_circles = 2; // set to one to not draw circles
};

MasterCircle.prototype = {
  sub_circles: function() {
    var pts = this.circle.points(this.num_of_points);
    var sub_circles = new Array();
    var n_circle = null;
    var p_circle = null;
    
    for ( idx in pts ) {
      var center_pt = this.circle.cpt.point_on_segment(pts[idx], this.factor_larger);
      var circle = new ProCircle(center_pt, this.circle.radius);
      circle.prev_circle = p_circle;
      sub_circles[idx] = circle;
      p_circle = circle;
    }

    sub_circles[0].prev_circle = sub_circles[this.num_of_points - 1];
    n_circle = sub_circles[0];
    for ( var idx = this.num_of_points - 1; idx > -1; idx-- ) {
      sub_circles[idx].next_circle = n_circle;
      n_circle = sub_circles[idx];
    }
    return sub_circles;
  },
  
  draw_intersections: function(context) {
    var subs = this.sub_circles();
    for ( var idx = 0; idx < this.num_of_points; idx++ ) {
      var cc = subs[idx];

      var pts1_2 = this.circle.intersection( cc );

      var pt3 = cc.closest(this.circle.intersection(cc.next_circle));
      var pt4 = this.circle.closest(cc.intersection(cc.next_circle));
      var pt5 = this.circle.closest(cc.intersection(cc.prev_circle));
      var pt6 = cc.closest(this.circle.intersection(cc.prev_circle));
      
      var pt2 = pt3.closest(pts1_2);
      var pt1 = pt6.closest(pts1_2);

      draw_stack.push(new ProColorSetting("stroke(23,255,10)"));
      draw_stack.push(new ProColorSetting("fill(23,200,10)"));
      draw_stack.push(new ProTriangle(pt1, pt6, pt5));
      draw_stack.push(new ProTriangle(pt2, pt4, pt3));
      draw_stack.push(new ProColorSetting("fill(200,23,10)"));
      draw_stack.push(new ProColorSetting("stroke(255,23,10)"));
      draw_stack.push(new ProRect(pt4, pt3, pt6, pt5));

      if ( this.draw_the_circles == 2 ) {
        context.noFill();
        context.stroke(0,255,100);
        cc.draw(context);
        this.circle.draw(context);
      }
    }
  },

  draw: function(context) {
    if ( this.draw_the_circles != 1 ) {
      this.draw_intersections(context);
    } else {
      var subs = this.sub_circles();
      for ( c in subs ) { subs[c].draw(context); }
      this.circle.draw(context);
    }
  },

  new_masters: function() {
    var subs = this.sub_circles();
    var ret_val = [];
    for ( c in subs ) { 
      ret_val.push(new MasterCircle( subs[c].cpt.clone(), subs[c].radius, 
                                     this.num_of_points));
    }
    return ret_val;
  },
};

var draw_stack = new ProDrawStack();
var base_radius = 45;
var master_circle = new MasterCircle(new ProPoint(300,300), base_radius, 6);
var masters = [master_circle];
var global_counter = 0;

void setup() {
  size(600, 600);
  frameRate(2);
  background(#001100);
}

void draw() {
  var new_masters = [];
  for ( idx in masters ) {
    var m2 = masters[idx].new_masters();
    for ( idx2 in m2 ) { new_masters.push(m2[idx2]); }
    masters[idx].draw(this);
  }

  draw_stack.draw(this);
  draw_stack.clear();

  masters = new_masters;
  global_counter += 1;
  if ( global_counter == 4) { 
    noLoop();
  }
}

